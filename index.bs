<link rel="icon" href="folder-icon.png">
<pre class=metadata>
Title: File and Directory Entries API
Shortname: EntriesAPI
Abstract: This specification documents web browser support for file and directory upload by drag-and-drop operations. It introduces types representing directories with methods for asynchronous traversal, and extends {{HTMLInputElement}} and {{DataTransferItem}} [[!HTML]].
Status: ED
ED: http://inexorabletash.github.io/entries-api/
Level: 1
Editor: Joshua Bell, jsbell@google.com
Group: wicg
</pre>
<pre class="anchors">
spec: html; urlPrefix: https://html.spec.whatwg.org/multipage/
    urlPrefix: infrastructure.html
        type: dfn
            text: strictly splitting; url: #strictly-split-a-string
    urlPrefix: forms.html
        type: interface
            text: input; url: #the-input-element
            text: type; for: input; url: #attr-input-type
        type: dfn
            text: selected files; url: #concept-input-type-file-selected
            text: file upload; url: #file-upload-state-(type=file)
    urlPrefix: webappapis.html
        type: dfn
            text: queue a task
    urlPrefix: interaction.html
        type: dfn
            text: drag data store; url: #drag-data-store
            text: drag data store item list; url: #drag-data-store-item-list
            text: drag data item kind; url: #the-drag-data-item-kind
            text: read/write mode; url: #concept-dnd-rw
            text: read-only mode; url: #concept-dnd-ro
spec: webidl; urlPrefix: https://heycam.github.io/webidl/
    type: dfn
        text: invoke the callback; url: #es-invoking-callback-functions
</pre>

<div class=issue>
EDITORIAL:
Need a better name/short name for this spec. Suggestions?
</div>

<!-- ============================================================ -->
<h2 id=goals>Goals</h2>
<!-- ============================================================ -->

This specification documents the types and operations made available
by web browsers to script when a hierarchy of files and directories
are dragged and dropped onto a page or selected using form elements,
or equivalent user actions.

This is heavily based upon earlier drafts of [[file-system-api]] which
defines similar types in the context of a sandboxed file system,
including operations for creating and modifying files and directories,
but which has not been broadly adopted by web browsers.


<!-- ============================================================ -->
<h2 id=concepts>Concepts</h2>
<!-- ============================================================ -->

<!-- ============================================================ -->
<h3 id=names-paths>Names and Paths</h3>
<!-- ============================================================ -->

A <dfn>name</dfn> is a string which:

    * does not contain '/' (U+002F SOLIDUS)
    * does not contain NUL (U+0000)
    * is not '.' (U+002E FULL STOP)
    * is not '..' (U+002E FULL STOP, U+002E FULL STOP)

A <dfn>path segment</dfn> is a non-empty <a for=/>name</a>, '.' (U+002E FULL
STOP) or '..' (U+002E FULL STOP, U+002E FULL STOP).

A <dfn>relative path</dfn> is a string consisting of one or more
<a>path segments</a> joined by '/' (U+002F SOLIDUS).

An <dfn>absolute path</dfn> is a string consisting of '/' (U+002F SOLIDUS),
optionally followed by a <a>relative path</a>.

A <dfn>path</dfn> is either a <a>relative path</a> or an <a>absolute path</a>.

A <dfn>valid path</dfn> is a {{DOMString}} which is a <a>path</a>.

<div class=issue>
WEB-COMPAT:
Can we replace {{DOMString}} with {{USVString}} everywhere? If not,
encoding behavior needs to be defined. Is this web-compatible?
</div>

<!-- ============================================================ -->
<h3 id=files-dirs>Files and Directories</h3>
<!-- ============================================================ -->

A <dfn>file</dfn> consists of binary data and a <dfn
for=file>name</dfn> (a non-empty <a for=/>name</a>).

A <dfn>directory</dfn> consists of a <dfn for=directory>name</dfn>
(a <a for=/>name</a>) and an ordered list of members. Each member is
either a <a>file</a> or a <a>directory</a>. Each member of a
<a>directory</a> must have a distinct non-empty <a for=/>name</a>.

A <dfn>root directory</dfn> is a <a>directory</a> that is not a member
of a <a>directory</a>. A <a>root directory</a>'s <a for=/>name</a> is empty.

The <dfn>parent</dfn> of a <a>file</a> or
<a>directory</a> is the <a>directory</a> it is a member of. A <a>root
directory</a> has no <a>parent</a>.

<div class=issue>
EDITORIAL:
Should <a>directory</a> be defined as a special type of <a>file</a>
so that minimal changes are necessary in [[HTML]]?
</div>

<div class=note>
In most cases, the files and directories selected by the user will be
presented by the API as if contained by a <em>virtual root</em> that
does not exist as an entity in the actual file system backing the
interaction with the API.
</div>

<!-- ============================================================ -->
<h3 id=entries>Entries</h3>
<!-- ============================================================ -->

An <dfn id=entry-concept>entry</dfn> is either a <dfn>file entry</dfn> or
a <dfn>directory entry</dfn>.

An <a>entry</a> has an <dfn for=entry>name</dfn> (a
<a for=/>name</a>) and a <dfn>full path</dfn> (an <a>absolute path</a>).

An <a>entry</a> also has a <dfn>root</dfn>, which is
an associated <a>root directory</a>.

<div class=note>
<a>Entries</a> are defined in terms of <a>paths</a>
relative to a <a>root directory</a> to account for the fact that a
file system backing the interaction with the API may be modified
asynchronously during operations such as enumerating the contents of a
directory. Operations exposed on <a>entries</a> may
produce errors in such cases where the <a>paths</a> no longer
reference the same entity.
</div>

<!-- ============================================================ -->
<h3 id=dir-reader>Directory Reader</h3>
<!-- ============================================================ -->

A <dfn>directory reader</dfn> consists of
an associated <a>directory entry</a>,
an associated <a>directory</a> (initially null),
a <dfn>reading flag</dfn> (initially unset),
a <dfn>done flag</dfn> (initially unset),
and a <dfn>reader error</dfn> (initially null).


<!-- ============================================================ -->
<h2 id=algorithms>Algorithms</h2>
<!-- ============================================================ -->

To <dfn>resolve a relative path</dfn> with <var>abspath</var> (an
<a>absolute path</a>) and <var>relpath</var> (a <a>relative path</a>),
run the following steps which return an <a>absolute path</a>:

1. If <var>relpath</var> is an <a>absolute path</a>, return
    <var>relpath</var>..

2. Let <var>abspath segments</var> be the result of <a>strictly
    splitting</a> <var>abspath</var> on '/' (U+002F SOLIDUS).

    <div class=note>The first string will be empty.</div>

3. Let <var>relpath segments</var> be the result of <a>strictly
    splitting</a> <var>relpath</var> on '/' (U+002F SOLIDUS).

4. For each <var>segment</var> in <var>relpath segments</var>,
    switch on <var>segment</var>:

    <dl class=switch>

      <dt>'.' (U+002E FULL STOP)
      <dd>Continue.

      <dt>'..' (U+002E FULL STOP, U+002E FULL STOP)
      <dd>Remove the last member of <var>abspath segments</var>
         unless it is the only member.

      <dt>Otherwise
      <dd>Append <var>segment</var> to <var>abspath segments</var>.

   </dl>

5. Return <var>abspath segments</var> joined by '/' (U+002F SOLIDUS).



To <dfn>evaluate a path</dfn> with <var>directory</var> (an <a>root
directory</a>) and <var>path</var> (an <a>absolute path</a>), run the
following steps which return a <a>file</a>, <a>directory</a>, or
<em>failure</em>.

1. Let <var>segments</var> be the result of <a>strictly splitting</a>
    <var>path</var> on '/' (U+002F SOLIDUS).

2. Remove the first (empty) entry from <var>segments</var>.

3. For each <var>segment</var> in <var>segments</var>, switch on <var>segment</var>:

    <dl class=switch>

      <dt>'.' (U+002E FULL STOP)
      <dd>Continue.

      <dt>'..' (U+002E FULL STOP, U+002E FULL STOP)
      <dd>Let <var>directory</var> be <var>directory</var>'s <a>parent</a>,
          or <var>directory</var> if none.

      <dt>Otherwise
      <dd>
         Run these substeps:

         1. Let <var>item</var> be the member of <var>directory</var>
            with <a for=/>name</a> equal to <var>segment</var>, or return
            <em>failure</em> if none.

         2. If <var>segment</var> is the last item in <var>segments</var>,
            return <var>item</var>.

         3. If <var>item</var> is a <a>file</a>, return <em>failure</em>.

         4. Let <var>directory</var> be <var>item</var>.

    </dl>


<!-- ============================================================ -->
<h2 id=html-forms>HTML Forms</h2>
<!-- ============================================================ -->

<div class=issue>
EDITORIAL:
This section should be merged into [[HTML]].
</div>

<pre class=idl>
partial interface HTMLInputElement {
    readonly attribute FrozenArray&lt;Entry&gt; webkitEntries;
};
</pre>

When an <{input}> element's <{input/type}> attribute is in the <a>File
Upload</a> state, the rules in this section apply.

The {{webkitEntries}} IDL attribute allows scripts to access the
element's selected entries. On getting, if the IDL attribute applies,
it must return an array of {{Entry}} objects that represent the
current <a>selected files</a> (including directories, if permitted).
If the IDL attribute does not apply, then it must instead return null.

<div class=issue>
TODO:
Define <code>webkitDirectory</code> and <code>webkitRelativePath</code>.
</div>


<!-- ============================================================ -->
<h2 id=api-data>Data Transfer</h2>
<!-- ============================================================ -->

<div class=issue>
EDITORIAL:
This section should be merged into [[HTML]].
</div>

During a <em>drag-and-drop operation</em>, <a>file</a> and
<a>directory</a> items are associated with <a>entries</a>. Each
<a>entry</a> is a member of a <a>root directory</a> unique to the
<a>drag data store</a>.

Additionally, each <a>directory</a> item is represented in the <a>drag
data store item list</a> as a <i>File</i>. If it is accessed via
{{getAsFile()}} a zero-length {{File}} is returned.

<div class=note>
A user agent may represent any hierarchical data as files and
directories during a drag-and-drop operation. For example, audio data
stored in a relational database with separate tables for albums
metadata and blobs for tracks could be exposed to script as
directories and files.
</div>

<pre class=idl>
partial interface DataTransferItem {
    Entry webkitGetAsEntry();
};
</pre>

The {{webkitGetAsEntry()}} method must run the following steps when invoked:

1. If the {{DataTransferItem}} object is not in the <a>read/write
    mode</a> or the <a>read-only mode</a>, return null and abort these
    steps.

2. If the <a>drag data item kind</a> is not <em>File</em>, then return
    null and abort these steps.

3. Return a new {{Entry}} object representing the <a>entry</a>.

<div class=example>
Handling drag and drop of files and directories:
<pre class=lang-javascript>
elem.addEventListener('drop', e => {
  // Prevent navigation.
  e.preventDefault();

  // Process all of the items.
  for (let i = 0; i < e.dataTransfer.items.length; ++i) {
    let item = e.dataTransfer.items[i];

    // kind will be 'file' for file/directory entries.
    if (item.kind === 'file') {
      let entry = item.webkitGetAsEntry();
      handleEntry(entry);
    }
  }
});
</pre>
</div>


<!-- ============================================================ -->
<h2 id=api-files-directories>Files and Directories</h2>
<!-- ============================================================ -->

<h3 id=common-types>Common Types</h3>

<pre class=idl>
[Exposed=(Window,Worker)]
interface FileError : DOMError {
    const unsigned short NOT_FOUND_ERR = 1;
    const unsigned short SECURITY_ERR = 2;
    const unsigned short ABORT_ERR = 3;
    const unsigned short NOT_READABLE_ERR = 4;
    const unsigned short ENCODING_ERR = 5;
    const unsigned short NO_MODIFICATION_ALLOWED_ERR = 6;
    const unsigned short INVALID_STATE_ERR = 7;
    const unsigned short SYNTAX_ERR = 8;
    const unsigned short INVALID_MODIFICATION_ERR = 9;
    const unsigned short QUOTA_EXCEEDED_ERR = 10;
    const unsigned short TYPE_MISMATCH_ERR = 11;
    const unsigned short PATH_EXISTS_ERR = 12;

    readonly attribute unsigned short code;
};
</pre>

When a <var>name</var> <dfn>file error</dfn> is to be created, create
a new {{FileError}} object with the given <var>name</var>, with the
<em>code</em> from the table below and a <em>message</em> such as the
description from the table below.

<div class=note>
User agents are encouraged to give more specific and meaningful error
messages to allow developers to debug their code, while ensuring
security and privacy is maintained.
</div>

<style>
table.deets { border-collapse: collapse; }
table.deets th { border-bottom: 2px solid silver; vertical-align: top; }
table.deets td { border-bottom: 1px solid silver; vertical-align: top; }
table.deets .used:after { color: #080; content: "\2713"; font-size: 200%; }
table.deets .unused:after { color: #800; content: "\2717"; font-size: 200%; }
</style>

<table class=deets dfn-for=errors>
  <tr>
    <th>Name</th>
    <th>Description</th>
    <th>Code and value</th>
    <th>Used?</th>
  </tr>
  <tr>
    <td>"<dfn enum-value><code>NotFoundError</code></dfn>"</td>
    <td class=long>
      A requested file or directory could not be found at the time an
      operation was processed.
    </td>
    <td>{{NOT_FOUND_ERR}} (1)</td>
    <td class=used></td>
  </tr>
  <tr>
    <td>"<dfn enum-value><code>SecurityError</code></dfn>"</td>
    <td class=long>
      It was determined that certain files are unsafe for access
      within a Web application, or that too many calls are being made
      on file resources.
    </td>
    <td>{{SECURITY_ERR}} (2)</td>
    <td class=unused></td>
  </tr>
  <tr>
    <td>"<dfn enum-value><code>AbortError</code></dfn>"</td>
    <td class=long>
      An ongoing operation was aborted, typically with a call to
      abort().
    </td>
    <td>{{ABORT_ERR}} (3)</td>
    <td class=unused></td>
  </tr>
  <tr>
    <td>"<dfn enum-value><code>NotReadableError</code></dfn>"</td>
    <td class=long>
      The requested file could not be read, typically due to
      permission problems that have occurred after a reference to a
      file was acquired.
    </td>
    <td>{{NOT_READABLE_ERR}} (4)</td>
    <td class=unused></td>
  </tr>
  <tr>
    <td>"<dfn enum-value><code>EncodingError</code></dfn>"</td>
    <td class=long>
      A URI supplied to the API was malformed, or the resulting Data
      URL has exceeded the URL length limitations for Data URLs.
    </td>
    <td>{{ENCODING_ERR}} (5)</td>
    <td class=unused></td>
  </tr>
  <tr>
    <td>"<dfn enum-value><code>NoModificationAllowedError</code></dfn>"</td>
    <td class=long>
      An attempt was made to write to a file or directory which could
      not be modified due to the state of the underlying filesystem.
    </td>
    <td>{{NO_MODIFICATION_ALLOWED_ERR}} (6)</td>
    <td class=unused></td>
  </tr>
  <tr>
    <td>"<dfn enum-value><code>InvalidStateError</code></dfn>"</td>
    <td class=long>
      An operation that depends on state cached in an interface object
      was made but the state had changed since it was read from disk.
    </td>
    <td>{{INVALID_STATE_ERR}} (7)</td>
    <td class=used></td>
  </tr>
  <tr>
    <td>"<dfn enum-value><code>SyntaxError</code></dfn>"</td>
    <td class=long>
      An invalid or unsupported argument was given, like an invalid
      line ending specifier.
    </td>
    <td>{{SYNTAX_ERR}} (8)</td>
    <td class=unused></td>
  </tr>
  <tr>
    <td>"<dfn enum-value><code>InvalidModificationError</code></dfn>"</td>
    <td class=long>
      An operation that depends on state cached in an interface object
      was made but the state had changed since it was read from disk.
    </td>
    <td>{{INVALID_MODIFICATION_ERR}} (9)</td>
    <td class=unused></td>
  </tr>
  <tr>
    <td>"<dfn enum-value><code>QuotaExceededError</code></dfn>"</td>
    <td class=long>
      The operation failed because it would cause the application to
      exceed its storage quota.
    </td>
    <td>{{QUOTA_EXCEEDED_ERR}} (10)</td>
    <td class=unused></td>
  </tr>
  <tr>
    <td>"<dfn enum-value><code>TypeMismatchError</code></dfn>"</td>
    <td class=long>
      The path supplied exists, but was not an entry of requested
      type.
    </td>
    <td>{{TYPE_MISMATCH_ERR}} (11)</td>
    <td class=used></td>
  </tr>
  <tr>
    <td>"<dfn enum-value><code>PathExistsError</code></dfn>"</td>
    <td class=long>
      An attempt was made to create a file or directory where an
      element already exists.
    </td>
    <td>{{PATH_EXISTS_ERR}} (12)</td>
    <td class=unused></td>
  </tr>
</table>

<div class=issue>
WEB-COMPAT:
We would like to eliminate {{DOMError}} from the platform in favor of
{{DOMException}}. Is using {{FileError}} here necessary for
web-compat?

Note that the codes here differ from those in {{DOMException}}:
"{{NotFoundError}}" = 1 vs. 8,
"{{SecurityError}}" = 2 vs. 18,
"{{AbortError}}" = 3 vs. 20,
"{{InvalidStateError}}" = 7 vs. 11,
"{{SyntaxError}}" = 8 vs. 12,
"{{InvalidModificationError}}" = 9 vs. 13,
"{{QuotaExceededError}}" = 10 vs. 22,
"{{TypeMismatchError}}" = 11 vs. native <code>TypeError</code>.
</div>

<pre class=idl>
callback ErrorCallback = void (FileError err);
</pre>

An {{ErrorCallback}} function is used for operations that may return an
error asynchronously.



<!-- ============================================================ -->
<h3 id=api-entry>The {{Entry}} Interface</h3>
<!-- ============================================================ -->

<pre class=idl>
[NoInterfaceObject]
interface Entry {
    readonly attribute boolean isFile;
    readonly attribute boolean isDirectory;
    readonly attribute DOMString name;
    readonly attribute DOMString fullPath;

    void getParent(optional EntryCallback successCallback,
                   optional ErrorCallback errorCallback);
};
</pre>

<div class=issue>
WEB-COMPAT: The <code>[NoInterfaceObject]</code> extended attribute is
present on these in Chrome, hiding the types from the global
namespace. Is it web-compatible to remove it, and simply expose these
types in the global namespace as is done for most web APIs?
</div>

An {{Entry}} has an associated <a>entry</a>.

The {{isFile}} attribute of the {{Entry}} interface must return true if the
<a>entry</a> is a <a>file entry</a> and false otherwise.

The {{isDirectory}} attribute of the {{Entry}} interface must return true if the
<a>entry</a> is a <a>directory entry</a> and false otherwise.

The {{name}} attribute of the {{Entry}} interface must return
the <a for=entry>name</a> of the <a>entry</a>.

The {{fullPath}} attribute of the {{Entry}} interface must return
the <a>full path</a> of the <a>entry</a>.

The
<dfn method for=Entry>getParent(<var>successCallback</var>, <var>errorCallback</var>)</dfn>
method, when invoked, must run the following steps:

1. <a>Queue a task</a> to perform the following substeps:

    1. Let <var>path</var> be the result of running the steps to
        <a>resolve a relative path</a> with the <a>entry</a>'s
        <a>full path</a> and '..'.

    2. Let <var>item</var> be the result of running the steps to
        <a>evaluate a path</a> with the <a>entry</a>'s <a>root</a> and
        <var>path</var>.

    3. If <var>item</var> is <em>failure</em>, <a>invoke the
        callback</a> <var>errorCallback</var> (if given) with a
        "{{NotFoundError}}" <a>file error</a>, and
        terminate these steps.

    4. Let <var>entry</var> be a new <a>directory entry</a> with
        <var>item</var>'s <a for=directory>name</a> as <a for=entry>name</a>
        and <var>path</var> as <a>full path</a>.

    5. <a>Invoke the callback</a> <var>successCallback</var> with a
        new {{DirectoryEntry}} object associated with
        <var>entry</var>.

<div class=note>
An error is possible if files have been modified on disk since the
{{Entry}} was created.
</div>

<div class=example>
Handling an entry:
<pre class=lang-javascript>
function handleEntry(entry) {
  console.log('name: ' + entry.name);
  console.log('path: ' + entry.fullPath);
  if (entry.isFile) {
    console.log('... is a file');
  } else if (entry.isDirectory) {
    console.log('... is a directory');
  }
}
</pre>
</div>

<div class=example>
Helper function to adapt {{getParent()}} for use with promises:
<pre class=lang-javascript>
function getParentAsPromise(entry) {
  return new Promise((resolve, reject) => {
    entry.getParent(resolve, reject);
  });
}
</pre>
</div>

<!-- ============================================================ -->
<h3 id=api-directoryentry>The {{DirectoryEntry}} Interface</h3>
<!-- ============================================================ -->

<pre class=idl>
[NoInterfaceObject]
interface DirectoryEntry : Entry {
    DirectoryReader createReader();
    void getFile(DOMString path,
                 optional Flags options,
                 optional EntryCallback successCallback,
                 optional ErrorCallback errorCallback);
    void getDirectory(DOMString path,
                      optional Flags options,
                      optional EntryCallback successCallback,
                      optional ErrorCallback errorCallback);
};

dictionary Flags {};

callback EntryCallback = void (Entry entry);
</pre>

A {{DirectoryEntry}}'s associated <a>entry</a>
is a <a>directory entry</a>.


The <dfn method for=DirectoryEntry>createReader()</dfn> method, when invoked, must run the following steps:

1. Let <var>reader</var> be a new <a>directory reader</a> associated with the
    <a>directory entry</a>'s <a>directory</a>.

2. Return a newly created {{DirectoryReader}} object associated with <var>reader</var>.


The
<dfn method for=DirectoryEntry>getFile(<var>path</var>, <var>options</var>, <var>successCallback</var>, <var>errorCallback</var>)</dfn>
 method, when invoked, must run the following steps:

1. <a>Queue a task</a> to run the following substeps:

    1. If <var>path</var> is not a <a>valid path</a>, <a>invoke the
        callback</a> <var>errorCallback</var> (if given) with a
        "{{TypeMismatchError}}" <a>file error</a>, and
        terminate these steps.

    2. Let <var>path</var> be the result of running the steps to
        <a>resolve a relative path</a> with the <a>directory
        entry</a>'s <a>full path</a> and <var>path</var>.

    3. Let <var>item</var> be the result of running the steps to
        <a>evaluate a path</a> with the <a>directory entry</a>'s
        <a>root</a> and <var>path</var>.

    4. If <var>item</var> is <em>failure</em>, <a>invoke the
        callback</a> <var>errorCallback</var> (if given) with a
        "{{NotFoundError}}" <a>file error</a>, and
        terminate these steps.

    5. If <var>item</var> is not a <a>file</a>, <a>invoke the
        callback</a> <var>errorCallback</var> (if given) with a
        "{{TypeMismatchError}}" <a>file error</a>, and
        terminate these steps.

    6. Let <var>entry</var> be a new <a>file entry</a> with
        <var>item</var>'s <a for=file>name</a> as <a for=entry>name</a>
        and <var>path</var> as <a>full path</a>.

    7. <a>Invoke the callback</a> <var>successCallback</var> (if
        given) with a new {{FileEntry}} object associated with
        <var>entry</var>.

The
<dfn method for=DirectoryEntry>getDirectory(<var>path</var>, <var>options</var>, <var>successCallback</var>, <var>errorCallback</var>)</dfn>
method, when invoked, must run the following steps:

1. <a>Queue a task</a> to run the following substeps:

    1. If <var>path</var> is not a <a>valid path</a>, <a>invoke the
        callback</a> <var>errorCallback</var> (if given) with a
        "{{TypeMismatchError}}" <a>file error</a>, and
        terminate these steps.

    2. Let <var>path</var> be the result of running the steps to
        <a>resolve a relative path</a> with the <a>directory
        entry</a>'s <a>full path</a> and <var>path</var>.

    3. Let <var>item</var> be the result of running the steps to
        <a>evaluate a path</a> with the <a>directory entry</a>'s
        <a>root</a> and <var>path</var>.

    4. If <var>item</var> is <em>failure</em>, <a>invoke the
        callback</a> <var>errorCallback</var> (if given) with a
        "{{NotFoundError}}" <a>file error</a>, and
        terminate these steps.

    5. If <var>item</var> is not a <a>directory</a>, <a>invoke the
        callback</a> <var>errorCallback</var> (if given) with a
        "{{TypeMismatchError}}" <a>file error</a>, and
        terminate these steps.

    6. Let <var>entry</var> be a new <a>directory entry</a> with
        <var>item</var>'s <a for=directory>name</a> as <a
        for=entry>name</a> and <var>path</var> as <a>full path</a>.

    7. <a>Invoke the callback</a> <var>successCallback</var> (if
        given) with a new {{DirectoryEntry}} associated with
        <var>entry</var>.

<div class=note>
The {{Flags}} dictionary has no defined members and is present for
compatibility with existing implementations.
</div>

<div class=issue>
WEB-COMPAT:
If the file is not present, Chrome gives
"{{SecurityError}}" if <code>{create:true}</code> is
passed as <var>options</var>, and "{{NotFoundError}}"
otherwise. Is this necessary for web-compat?
</div>

<div class=example>
Helper functions to adapt {{getFile()}} and {{getDirectory()}} for use
with promises:
<pre class=lang-javascript>
function getFileAsPromise(entry, path) {
  return new Promise((resolve, reject) => {
    entry.getFile(path, {}, resolve, reject);
  });
}
function getDirectoryAsPromise(entry, path) {
  return new Promise((resolve, reject) => {
    entry.getDirectory(path, {}, resolve, reject);
  });
}
</pre>
</div>


<!-- ============================================================ -->
<h3 id=api-directoryreader>The {{DirectoryReader}} Interface</h3>
<!-- ============================================================ -->

<pre class=idl>
[NoInterfaceObject]
interface DirectoryReader {
    void readEntries(EntriesCallback successCallback,
                     optional ErrorCallback errorCallback);
};
callback EntriesCallback = void (sequence&lt;Entry&gt; entries);
</pre>

The
<dfn method for="DirectoryEntry">readEntries(<var>successCallback</var>, <var>errorCallback</var>)</dfn>
method, when invoked, must run the following steps:

1. If the <a>directory reader</a>'s <a>reading flag</a> is set,
    <a>queue a task</a> to <a>invoke the callback</a>
    <var>errorCallback</var> with an
    "{{InvalidStateError}}" <a>file error</a>, and
    terminate these steps.

2. If the <a>directory reader</a>'s <a>reader error</a> is not null,
    <a>queue a task</a> to <a>invoke the callback</a>
    <var>errorCallback</var> (if given) with <a>reader error</a>, and
    terminate these steps.

3. If the <a>directory reader</a>'s <a>done flag</a> is set, <a>queue
    a task</a> to <a>invoke the callback</a>
    <var>successCallback</var> with an empty sequence and terminate
    these steps.

4. Set the <a>directory reader</a>'s <a>reading flag</a>.

5. <a>Queue a task</a> to perform the following substeps:

    1. Clear the <a>directory reader</a>'s <a>reading flag</a>.

    2. Let <var>dir</var> be the <a>directory reader</a>'s <a>directory</a>.

    3. If <var>dir</var> is null, run these substeps:

        1. Let <var>dir</var> be the result of running the steps to
            <a>evaluate a path</a> with the <a>entry</a>'s <a>root</a>
            and <a>full path</a>.

        2. If <var>dir</var> is failure, set the <a>directory
            reader</a>'s <a>reader error</a> to a new
            "{{NotFoundError}}" <a>file error</a>,
            <a>invoke the callback</a> <var>errorCallback</var> (if
            given) with <a>reader error</a>, and terminate these
            steps.

        3. Set the <a>directory reader</a>'s <a>directory</a> to <var>dir</var>.

    4. Let <var>entries</var> be a non-zero number of entries from the
        <var>dir</var> that have not yet been produced by this
        <a>directory reader</a>, if any.

    5. If the previous step failed (for example, the <a>directory</a>
        was deleted or permission is denied), then set the <a>directory
        reader</a>'s <a>reader error</a> to an appropriate <a>file
        error</a>, <a>invoke the callback</a> <var>errorCallback</var>
        (if given) with <a>reader error</a>, and terminate these
        steps.

    6. If <var>entries</var> is empty, set the <a>directory
        reader</a>'s <a>done flag</a>.

    7. <a>Invoke the callback</a> <var>successCallback</var> with
        <var>entries</var>.


<div class=example>
Enumerating a directory:
<pre class=lang-javascript>
let reader = dirEntry.createReader();
let readBatch = function() {

    // Read a batch.
    reader.readEntries(entries => {

      // Complete?
      if (entries.length === 0) {
        return;
      }

      // Process the batch.
      entries.forEach(handleEntry);

      // Read the next batch.
      readBatch();

    }, error => console.warn(error));
  };

// Start reading
readBatch();
</pre>
</div>

<div class=example>
Helper function to adapt {{DirectoryReader}} for use with promises.
<pre class=lang-javascript>
function getEntriesAsPromise(entry) {
  return new Promise((resolve, reject) => {
    let result = [];
    let reader = dirEntry.createReader();

    (function readBatch() {
      reader.readEntries(entries => {
        if (entries.length > 0) {
          entries.forEach(e => result.push(e));
          readBatch();
        } else {
          resolve(result);
        }
      }, reject);
    }());
  });
}
</pre>
</div>

<div class=issue>
Add example for Observables, when those are a thing.
</div>


<!-- ============================================================ -->
<h3 id=api-fileentry>The {{FileEntry}} Interface</h3>
<!-- ============================================================ -->

<pre class=idl>
interface FileEntry : Entry {
    void file(FileCallback successCallback,
              optional ErrorCallback errorCallback);
};
callback FileCallback = void (File file);
</pre>

A {{FileEntry}}'s associated <a>entry</a>
is a <a>file entry</a>.

The
<dfn method for="FileEntry">file(<var>successCallback</var>, <var>errorCallback</var>)</dfn>
method, when invoked, must run the following steps:

1. <a>Queue a task</a> to perform the following substeps:

    1. Let <var>item</var> be the result of running the steps to
        <a>evaluate a path</a> with the <a>file entry</a>'s
        <a>root</a> and <a>full path</a>.

    2. If <var>item</var> is <em>failure</em>, <a>invoke the
        callback</a> <var>errorCallback</var> (if given) with a
        "{{NotFoundError}}" <a>file error</a>, and
        terminate these steps.

    3. If <var>item</var> is a <a>directory</a>, <a>invoke the
        callback</a> <var>errorCallback</var> (if given) with a
        "{{TypeMismatchError}}" <a>file error</a>, and
        terminate these steps.

    3. <a>Invoke the callback</a> <var>successCallback</var> with a new
        {{File}} object representing <var>item</var>.

<div class=example>
Read the contents of a dropped file using {{FileReader}}:
<pre class=lang-javascript>
function readFileEntry(entry) {
  entry.file(file => {
    let reader = new FileReader();
    reader.readAsText(file);
    reader.onerror = error => console.warn(error);
    reader.onload = () => {
      console.log(reader.result);
    };
  }, error => console.warn(error));
}
</pre>
</div>

<div class=example>
Helper function to adapt {{file()}} for use with promises:
<pre class=lang-javascript>
function fileAsPromise(entry) {
  return new Promise((resolve, reject) => {
    entry.file(resolve, reject);
  });
}
</pre>
</div>


<h2 id=acknowledgements>Acknowledgements</h2>

This specification is based heavily on the work of Eric Uhrhane in
[[file-system-api]], which introduced the {{Entry}} types.

Thanks to Tab Atkins, Jr. for creating and maintaining <a
href="https://github.com/tabatkins/bikeshed">Bikeshed</a>, the
specification authoring tool used to create this document.

And thanks to
Ali Alabbas
and
Marijn Kruisselbrink
for suggestions, reviews, and other feedback.
